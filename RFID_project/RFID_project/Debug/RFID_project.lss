
RFID_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080014a  0080014a  00000dca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002944  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e27  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001053  00000000  00000000  00004747  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  0000579c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000930  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b0e  00000000  00000000  00006584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	4a 06       	cpc	r4, r26

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ec ee       	ldi	r30, 0xEC	; 236
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	aa 34       	cpi	r26, 0x4A	; 74
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	aa e4       	ldi	r26, 0x4A	; 74
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 34       	cpi	r26, 0x4C	; 76
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 73 05 	call	0xae6	; 0xae6 <main>
  b6:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z15i2c_lcd_sendcmdc>:
 */ 

#include "i2c_lcd.h"


void i2c_lcd_sendcmd(char cmd){
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
	unsigned char upper, lower;
	lower = (cmd<<4)&0xF0;
  c4:	90 e1       	ldi	r25, 0x10	; 16
  c6:	89 9f       	mul	r24, r25
  c8:	80 01       	movw	r16, r0
  ca:	11 24       	eor	r1, r1
	upper = cmd & 0xF0; 
  cc:	c8 2f       	mov	r28, r24
  ce:	c0 7f       	andi	r28, 0xF0	; 240
	
	i2c_start();
  d0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z9i2c_startv>
	i2c_transmit(slave_address);
  d4:	8e e4       	ldi	r24, 0x4E	; 78
  d6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z15i2c_lcd_sendcmdc+0x20>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z15i2c_lcd_sendcmdc+0x26>
  e4:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(upper|0x0C);
  e6:	8c 2f       	mov	r24, r28
  e8:	8c 60       	ori	r24, 0x0C	; 12
  ea:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
  ee:	83 ef       	ldi	r24, 0xF3	; 243
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z15i2c_lcd_sendcmdc+0x34>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z15i2c_lcd_sendcmdc+0x3a>
  f8:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(upper|0x08);
  fa:	8c 2f       	mov	r24, r28
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z15i2c_lcd_sendcmdc+0x48>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z15i2c_lcd_sendcmdc+0x4e>
 10c:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(lower|0x0C);
 10e:	80 2f       	mov	r24, r16
 110:	8c 60       	ori	r24, 0x0C	; 12
 112:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 116:	83 ef       	ldi	r24, 0xF3	; 243
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <_Z15i2c_lcd_sendcmdc+0x5c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_Z15i2c_lcd_sendcmdc+0x62>
 120:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(lower|0x08);
 122:	80 2f       	mov	r24, r16
 124:	88 60       	ori	r24, 0x08	; 8
 126:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 12a:	83 ef       	ldi	r24, 0xF3	; 243
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <_Z15i2c_lcd_sendcmdc+0x70>
 132:	00 c0       	rjmp	.+0      	; 0x134 <_Z15i2c_lcd_sendcmdc+0x76>
 134:	00 00       	nop
	_delay_ms(2);
	i2c_stop();
 136:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z8i2c_stopv>
}
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <_Z12i2c_lcd_initv>:


void i2c_lcd_init() {
	// Initialization sequence
	i2c_start();
 142:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z9i2c_startv>
	i2c_transmit(slave_address);
 146:	8e e4       	ldi	r24, 0x4E	; 78
 148:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 14c:	83 ef       	ldi	r24, 0xF3	; 243
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <_Z12i2c_lcd_initv+0xe>
 154:	00 c0       	rjmp	.+0      	; 0x156 <_Z12i2c_lcd_initv+0x14>
 156:	00 00       	nop
	_delay_ms(2);

	i2c_transmit(0x30|0x0C);
 158:	8c e3       	ldi	r24, 0x3C	; 60
 15a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 15e:	83 ef       	ldi	r24, 0xF3	; 243
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z12i2c_lcd_initv+0x20>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z12i2c_lcd_initv+0x26>
 168:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(0x30|0x08);
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <_Z12i2c_lcd_initv+0x32>
 178:	00 c0       	rjmp	.+0      	; 0x17a <_Z12i2c_lcd_initv+0x38>
 17a:	00 00       	nop
	_delay_ms(5);
	
	i2c_transmit(0x30|0x0C);
 17c:	8c e3       	ldi	r24, 0x3C	; 60
 17e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 182:	83 ef       	ldi	r24, 0xF3	; 243
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <_Z12i2c_lcd_initv+0x44>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <_Z12i2c_lcd_initv+0x4a>
 18c:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(0x30|0x08);
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 194:	81 ee       	ldi	r24, 0xE1	; 225
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z12i2c_lcd_initv+0x56>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_Z12i2c_lcd_initv+0x5c>
 19e:	00 00       	nop
	_delay_ms(5);
	
	i2c_transmit(0x30|0x0C);
 1a0:	8c e3       	ldi	r24, 0x3C	; 60
 1a2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 1a6:	83 ef       	ldi	r24, 0xF3	; 243
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z12i2c_lcd_initv+0x68>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z12i2c_lcd_initv+0x6e>
 1b0:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(0x30|0x08);
 1b2:	88 e3       	ldi	r24, 0x38	; 56
 1b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 1b8:	81 ee       	ldi	r24, 0xE1	; 225
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <_Z12i2c_lcd_initv+0x7a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_Z12i2c_lcd_initv+0x80>
 1c2:	00 00       	nop
	_delay_ms(5);
	
	i2c_transmit(0x20|0x0C);
 1c4:	8c e2       	ldi	r24, 0x2C	; 44
 1c6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 1ca:	83 ef       	ldi	r24, 0xF3	; 243
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <_Z12i2c_lcd_initv+0x8c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_Z12i2c_lcd_initv+0x92>
 1d4:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(0x20|0x08);
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 1dc:	83 ef       	ldi	r24, 0xF3	; 243
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z12i2c_lcd_initv+0x9e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z12i2c_lcd_initv+0xa4>
 1e6:	00 00       	nop
	_delay_ms(2);	
	i2c_stop();
 1e8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z8i2c_stopv>

	// Send initialization commands
	i2c_lcd_sendcmd(lcd_functionset); // Function Set: 4-bit mode, 2 lines, 5x8 font
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
	i2c_lcd_sendcmd(lcd_cleardisplay); // Clear Display
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
	i2c_lcd_sendcmd(lcd_entrymodeset); // Entry Mode Set: Increment cursor, no display shift
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
	i2c_lcd_sendcmd(lcd_displayon); // display on
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
 204:	08 95       	ret

00000206 <_Z16i2c_lcd_sendcharc>:
}



void i2c_lcd_sendchar(char data){
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
	unsigned char upper, lower;
	lower = (data<<4)&0xF0;
 20c:	90 e1       	ldi	r25, 0x10	; 16
 20e:	89 9f       	mul	r24, r25
 210:	80 01       	movw	r16, r0
 212:	11 24       	eor	r1, r1
	upper = data & 0xF0;
 214:	c8 2f       	mov	r28, r24
 216:	c0 7f       	andi	r28, 0xF0	; 240
	
	i2c_start();
 218:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z9i2c_startv>
	i2c_transmit(slave_address);
 21c:	8e e4       	ldi	r24, 0x4E	; 78
 21e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 222:	83 ef       	ldi	r24, 0xF3	; 243
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <_Z16i2c_lcd_sendcharc+0x20>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <_Z16i2c_lcd_sendcharc+0x26>
 22c:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(upper|0x0D);
 22e:	8c 2f       	mov	r24, r28
 230:	8d 60       	ori	r24, 0x0D	; 13
 232:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 236:	83 ef       	ldi	r24, 0xF3	; 243
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <_Z16i2c_lcd_sendcharc+0x34>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z16i2c_lcd_sendcharc+0x3a>
 240:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(upper|0x09);
 242:	8c 2f       	mov	r24, r28
 244:	89 60       	ori	r24, 0x09	; 9
 246:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 24a:	83 ef       	ldi	r24, 0xF3	; 243
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <_Z16i2c_lcd_sendcharc+0x48>
 252:	00 c0       	rjmp	.+0      	; 0x254 <_Z16i2c_lcd_sendcharc+0x4e>
 254:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(lower|0x0D);
 256:	80 2f       	mov	r24, r16
 258:	8d 60       	ori	r24, 0x0D	; 13
 25a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 25e:	83 ef       	ldi	r24, 0xF3	; 243
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <_Z16i2c_lcd_sendcharc+0x5c>
 266:	00 c0       	rjmp	.+0      	; 0x268 <_Z16i2c_lcd_sendcharc+0x62>
 268:	00 00       	nop
	_delay_ms(2);
	i2c_transmit(lower|0x09);
 26a:	80 2f       	mov	r24, r16
 26c:	89 60       	ori	r24, 0x09	; 9
 26e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12i2c_transmith>
 272:	83 ef       	ldi	r24, 0xF3	; 243
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <_Z16i2c_lcd_sendcharc+0x70>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <_Z16i2c_lcd_sendcharc+0x76>
 27c:	00 00       	nop
	_delay_ms(2);
	i2c_stop();
 27e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z8i2c_stopv>
}
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <_Z18i2c_lcd_sendstringPc>:


void i2c_lcd_sendstring(char* str){
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	while (*str != '\0'){
 290:	88 81       	ld	r24, Y
 292:	88 23       	and	r24, r24
 294:	21 f0       	breq	.+8      	; 0x29e <_Z18i2c_lcd_sendstringPc+0x14>
		i2c_lcd_sendchar(*(str++));
 296:	21 96       	adiw	r28, 0x01	; 1
 298:	0e 94 03 01 	call	0x206	; 0x206 <_Z16i2c_lcd_sendcharc>
	i2c_stop();
}


void i2c_lcd_sendstring(char* str){
	while (*str != '\0'){
 29c:	f9 cf       	rjmp	.-14     	; 0x290 <_Z18i2c_lcd_sendstringPc+0x6>
		i2c_lcd_sendchar(*(str++));
	}
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <_Z16i2c_lcd_positionii>:


void i2c_lcd_position(int col, int row) {
	switch(row) {
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	71 05       	cpc	r23, r1
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <_Z16i2c_lcd_positionii+0xe>
 2aa:	62 30       	cpi	r22, 0x02	; 2
 2ac:	71 05       	cpc	r23, r1
 2ae:	31 f0       	breq	.+12     	; 0x2bc <_Z16i2c_lcd_positionii+0x18>
 2b0:	08 95       	ret
		case 1:
		i2c_lcd_sendcmd(0x80 | (0x00 + col - 1));
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
		break;
 2ba:	08 95       	ret
		case 2:
		i2c_lcd_sendcmd(0x80 | (0x40 + col - 1));
 2bc:	81 5c       	subi	r24, 0xC1	; 193
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
 2c4:	08 95       	ret

000002c6 <_Z8i2c_initv>:
unsigned char i2c_read(unsigned char final){
	if (final == 0) TWCR  = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); // send ACK
	else TWCR = (1<<TWINT)|(1<<TWEN); // send NACK
	while(!(TWCR&(1<<TWINT))) ;
	return TWDR;
}
 2c6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ca:	88 e4       	ldi	r24, 0x48	; 72
 2cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	08 95       	ret

000002d8 <_Z12i2c_transmith>:
 2d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2dc:	ec eb       	ldi	r30, 0xBC	; 188
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	84 e8       	ldi	r24, 0x84	; 132
 2e2:	80 83       	st	Z, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	08 95       	ret

000002e8 <_Z9i2c_startv>:


void i2c_start(){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTA); // start condition
 2e8:	84 ea       	ldi	r24, 0xA4	; 164
 2ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT))) ;
 2ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f2:	88 23       	and	r24, r24
 2f4:	e4 f7       	brge	.-8      	; 0x2ee <_Z9i2c_startv+0x6>
}
 2f6:	08 95       	ret

000002f8 <_Z8i2c_stopv>:


void i2c_stop(){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); // stop condition
 2f8:	84 e9       	ldi	r24, 0x94	; 148
 2fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2fe:	08 95       	ret

00000300 <_ZN7mfrc522C1Eii>:
#include "RFID.h"



// initial function
mfrc522::mfrc522(int ss_pin, int reset){
 300:	fc 01       	movw	r30, r24
    this->ss_pin = ss_pin;
 302:	60 83       	st	Z, r22
    (sbi(PORTB, this->ss_pin));
 304:	55 b1       	in	r21, 0x05	; 5
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	c9 01       	movw	r24, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <_ZN7mfrc522C1Eii+0x12>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <_ZN7mfrc522C1Eii+0xe>
 316:	85 2b       	or	r24, r21
 318:	85 b9       	out	0x05, r24	; 5
    (sbi(DDRB, this->ss_pin));
 31a:	54 b1       	in	r21, 0x04	; 4
 31c:	c9 01       	movw	r24, r18
 31e:	00 80       	ld	r0, Z
 320:	02 c0       	rjmp	.+4      	; 0x326 <_ZN7mfrc522C1Eii+0x26>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <_ZN7mfrc522C1Eii+0x22>
 32a:	85 2b       	or	r24, r21
 32c:	84 b9       	out	0x04, r24	; 4
    
    this->rst = reset;
 32e:	41 83       	std	Z+1, r20	; 0x01
    (sbi(PORTB, this->rst));
 330:	55 b1       	in	r21, 0x05	; 5
 332:	c9 01       	movw	r24, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <_ZN7mfrc522C1Eii+0x3a>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	4a 95       	dec	r20
 33c:	e2 f7       	brpl	.-8      	; 0x336 <_ZN7mfrc522C1Eii+0x36>
 33e:	85 2b       	or	r24, r21
 340:	85 b9       	out	0x05, r24	; 5
    (sbi(DDRB, this->rst));
 342:	84 b1       	in	r24, 0x04	; 4
 344:	01 80       	ldd	r0, Z+1	; 0x01
 346:	02 c0       	rjmp	.+4      	; 0x34c <_ZN7mfrc522C1Eii+0x4c>
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <_ZN7mfrc522C1Eii+0x48>
 350:	28 2b       	or	r18, r24
 352:	24 b9       	out	0x04, r18	; 4
 354:	08 95       	ret

00000356 <_ZN7mfrc52212write_to_regEhh>:
}


// function: write to reg of MFRC522
void mfrc522::write_to_reg(uint8_t addr, uint8_t data){
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	8c 01       	movw	r16, r24
 362:	f4 2e       	mov	r15, r20
    (cbi(PORTB, this->ss_pin));
 364:	95 b1       	in	r25, 0x05	; 5
 366:	c1 e0       	ldi	r28, 0x01	; 1
 368:	d0 e0       	ldi	r29, 0x00	; 0
 36a:	9e 01       	movw	r18, r28
 36c:	f8 01       	movw	r30, r16
 36e:	00 80       	ld	r0, Z
 370:	02 c0       	rjmp	.+4      	; 0x376 <_ZN7mfrc52212write_to_regEhh+0x20>
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <_ZN7mfrc52212write_to_regEhh+0x1c>
 37a:	82 2f       	mov	r24, r18
 37c:	80 95       	com	r24
 37e:	89 23       	and	r24, r25
 380:	85 b9       	out	0x05, r24	; 5
    
    spi_transmit((addr<<1) & 0x7E);
 382:	86 2f       	mov	r24, r22
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	8e 77       	andi	r24, 0x7E	; 126
 38c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z12spi_transmith>
    spi_transmit(data);
 390:	8f 2d       	mov	r24, r15
 392:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z12spi_transmith>
    
    (sbi(PORTB, this->ss_pin));
 396:	85 b1       	in	r24, 0x05	; 5
 398:	f8 01       	movw	r30, r16
 39a:	00 80       	ld	r0, Z
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <_ZN7mfrc52212write_to_regEhh+0x4c>
 39e:	cc 0f       	add	r28, r28
 3a0:	dd 1f       	adc	r29, r29
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <_ZN7mfrc52212write_to_regEhh+0x48>
 3a6:	c8 2b       	or	r28, r24
 3a8:	c5 b9       	out	0x05, r28	; 5
    
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	08 95       	ret

000003b6 <_ZN7mfrc52213read_from_regEh>:

// function: read from reg of MFRC522
uint8_t mfrc522::read_from_reg(uint8_t addr){
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	8c 01       	movw	r16, r24
    (cbi(PORTB, this->ss_pin));
 3c0:	95 b1       	in	r25, 0x05	; 5
 3c2:	c1 e0       	ldi	r28, 0x01	; 1
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	9e 01       	movw	r18, r28
 3c8:	f8 01       	movw	r30, r16
 3ca:	00 80       	ld	r0, Z
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <_ZN7mfrc52213read_from_regEh+0x1c>
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <_ZN7mfrc52213read_from_regEh+0x18>
 3d6:	82 2f       	mov	r24, r18
 3d8:	80 95       	com	r24
 3da:	89 23       	and	r24, r25
 3dc:	85 b9       	out	0x05, r24	; 5
    
    uint8_t return_data;
    spi_transmit(((addr<<1) & 0x7E) | 0x80);
 3de:	86 2f       	mov	r24, r22
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	8e 77       	andi	r24, 0x7E	; 126
 3e8:	80 68       	ori	r24, 0x80	; 128
 3ea:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z12spi_transmith>
    return_data = spi_transmit(none_value);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z12spi_transmith>
    
    (sbi(PORTB, this->ss_pin));
 3f4:	95 b1       	in	r25, 0x05	; 5
 3f6:	f8 01       	movw	r30, r16
 3f8:	00 80       	ld	r0, Z
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	cc 0f       	add	r28, r28
 3fe:	dd 1f       	adc	r29, r29
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <_ZN7mfrc52213read_from_regEh+0x46>
 404:	c9 2b       	or	r28, r25
 406:	c5 b9       	out	0x05, r28	; 5
    
    return return_data;
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <_ZN7mfrc52210setbitmaskEhh>:

// function: set a bit from reg of MFRC522
void mfrc522::setbitmask(uint8_t address, unsigned char mask){
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	8c 01       	movw	r16, r24
 41c:	d6 2f       	mov	r29, r22
 41e:	c4 2f       	mov	r28, r20
    uint8_t temp = 0x00;
    temp = read_from_reg(address);
 420:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
    write_to_reg(address, temp | mask);
 424:	48 2f       	mov	r20, r24
 426:	4c 2b       	or	r20, r28
 428:	6d 2f       	mov	r22, r29
 42a:	c8 01       	movw	r24, r16
 42c:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	08 95       	ret

0000043a <_ZN7mfrc52212clearbitmaskEhh>:
    
// function: clear a bit from reg of MFRC522   
void mfrc522::clearbitmask(uint8_t address, unsigned char mask){
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	8c 01       	movw	r16, r24
 444:	d6 2f       	mov	r29, r22
 446:	c4 2f       	mov	r28, r20
    uint8_t temp = 0x00;
    temp = read_from_reg(address);
 448:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
    write_to_reg(address, temp & (~mask));
 44c:	c0 95       	com	r28
 44e:	4c 2f       	mov	r20, r28
 450:	48 23       	and	r20, r24
 452:	6d 2f       	mov	r22, r29
 454:	c8 01       	movw	r24, r16
 456:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <_ZN7mfrc5225resetEv>:

// function: send a soft reset cmd to MFRC522
void mfrc522::reset(){
    write_to_reg(CommandReg, mfrc522_softreset);
 464:	4f e0       	ldi	r20, 0x0F	; 15
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
 46c:	08 95       	ret

0000046e <_ZN7mfrc52218getfirmwareversionEv>:
}

uint8_t mfrc522::getfirmwareversion(){
    uint8_t response = 0 ;
    response = read_from_reg(VersionReg);
 46e:	67 e3       	ldi	r22, 0x37	; 55
 470:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
    return response;
}
 474:	08 95       	ret

00000476 <_ZN7mfrc52212calculateCRCEPhiS0_>:

// calculate 16bit CRC and read it
void mfrc522::calculateCRC(uint8_t *data, int len, uint8_t *result) {
 476:	af 92       	push	r10
 478:	bf 92       	push	r11
 47a:	cf 92       	push	r12
 47c:	df 92       	push	r13
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	8c 01       	movw	r16, r24
 48c:	5b 01       	movw	r10, r22
 48e:	6a 01       	movw	r12, r20
 490:	79 01       	movw	r14, r18
    int i;
    uint8_t n;

    clearbitmask(DivIrqReg, 0x04);   // clear crc interrupt flag:CRC command is active and all bits are processed
 492:	44 e0       	ldi	r20, 0x04	; 4
 494:	65 e0       	ldi	r22, 0x05	; 5
 496:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7mfrc52212clearbitmaskEhh>
    setbitmask(FIFOLevelReg, 0x80);  // clear read and write pointer
 49a:	40 e8       	ldi	r20, 0x80	; 128
 49c:	6a e0       	ldi	r22, 0x0A	; 10
 49e:	c8 01       	movw	r24, r16
 4a0:	0e 94 09 02 	call	0x412	; 0x412 <_ZN7mfrc52210setbitmaskEhh>

    // Writing data to the FIFO.
    for (i = 0; i < len; i++) {
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	cc 15       	cp	r28, r12
 4aa:	dd 05       	cpc	r29, r13
 4ac:	54 f4       	brge	.+20     	; 0x4c2 <_ZN7mfrc52212calculateCRCEPhiS0_+0x4c>
        write_to_reg(FIFODataReg, data[i]);
 4ae:	f5 01       	movw	r30, r10
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	40 81       	ld	r20, Z
 4b6:	69 e0       	ldi	r22, 0x09	; 9
 4b8:	c8 01       	movw	r24, r16
 4ba:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>

    clearbitmask(DivIrqReg, 0x04);   // clear crc interrupt flag:CRC command is active and all bits are processed
    setbitmask(FIFOLevelReg, 0x80);  // clear read and write pointer

    // Writing data to the FIFO.
    for (i = 0; i < len; i++) {
 4be:	21 96       	adiw	r28, 0x01	; 1
 4c0:	f3 cf       	rjmp	.-26     	; 0x4a8 <_ZN7mfrc52212calculateCRCEPhiS0_+0x32>
        write_to_reg(FIFODataReg, data[i]);
    }
    write_to_reg(CommandReg, mfrc522_calcrc);
 4c2:	43 e0       	ldi	r20, 0x03	; 3
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	c8 01       	movw	r24, r16
 4c8:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>

    // Wait for the CRC calculation to complete.
    i = 0xFF;
 4cc:	cf ef       	ldi	r28, 0xFF	; 255
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
    do {
        n = read_from_reg(DivIrqReg);
 4d0:	65 e0       	ldi	r22, 0x05	; 5
 4d2:	c8 01       	movw	r24, r16
 4d4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
        i--;
 4d8:	21 97       	sbiw	r28, 0x01	; 1
    } while ((i != 0) && !(n & 0x04));  // CRCIrq = 1
 4da:	11 f0       	breq	.+4      	; 0x4e0 <_ZN7mfrc52212calculateCRCEPhiS0_+0x6a>
 4dc:	82 ff       	sbrs	r24, 2
 4de:	f8 cf       	rjmp	.-16     	; 0x4d0 <_ZN7mfrc52212calculateCRCEPhiS0_+0x5a>

    // Read the result from the CRC calculation.
    result[0] = read_from_reg(CRCResultRegL);
 4e0:	62 e2       	ldi	r22, 0x22	; 34
 4e2:	c8 01       	movw	r24, r16
 4e4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 4e8:	f7 01       	movw	r30, r14
 4ea:	80 83       	st	Z, r24
    result[1] = read_from_reg(CRCResultRegM);
 4ec:	61 e2       	ldi	r22, 0x21	; 33
 4ee:	c8 01       	movw	r24, r16
 4f0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 4f4:	f7 01       	movw	r30, r14
 4f6:	81 83       	std	Z+1, r24	; 0x01
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	df 90       	pop	r13
 506:	cf 90       	pop	r12
 508:	bf 90       	pop	r11
 50a:	af 90       	pop	r10
 50c:	08 95       	ret

0000050e <_ZN7mfrc5229RFID_initEv>:


// function: send cmd for initializing RFID
void mfrc522::RFID_init(){
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ec 01       	movw	r28, r24
    sbi (PORTB, this->ss_pin);
 514:	25 b1       	in	r18, 0x05	; 5
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	08 80       	ld	r0, Y
 51c:	02 c0       	rjmp	.+4      	; 0x522 <_ZN7mfrc5229RFID_initEv+0x14>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <_ZN7mfrc5229RFID_initEv+0x10>
 526:	82 2b       	or	r24, r18
 528:	85 b9       	out	0x05, r24	; 5
    reset();
 52a:	ce 01       	movw	r24, r28
 52c:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7mfrc5225resetEv>
    // timer: 3390*2*48/13.56MHz = 24ms (for each cmd the timer will run for the next cmd)
    // prescaler
    write_to_reg(TModeReg, 0x8D);
 530:	4d e8       	ldi	r20, 0x8D	; 141
 532:	6a e2       	ldi	r22, 0x2A	; 42
 534:	ce 01       	movw	r24, r28
 536:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    write_to_reg(TPrescalerReg, 0x3E);
 53a:	4e e3       	ldi	r20, 0x3E	; 62
 53c:	6b e2       	ldi	r22, 0x2B	; 43
 53e:	ce 01       	movw	r24, r28
 540:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    
    // reload_counter
	write_to_reg(TReloadRegL, 0x30);
 544:	40 e3       	ldi	r20, 0x30	; 48
 546:	6d e2       	ldi	r22, 0x2D	; 45
 548:	ce 01       	movw	r24, r28
 54a:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    write_to_reg(TReloadRegH, 0x00);
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	6c e2       	ldi	r22, 0x2C	; 44
 552:	ce 01       	movw	r24, r28
 554:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>

    // modulation
    write_to_reg(TxASKReg, 0x40); // 100% ASK (amplitude shift keying)
 558:	40 e4       	ldi	r20, 0x40	; 64
 55a:	65 e1       	ldi	r22, 0x15	; 21
 55c:	ce 01       	movw	r24, r28
 55e:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    write_to_reg(TModeReg, 0x3D);  // transmit only when an RF field is generated
 562:	4d e3       	ldi	r20, 0x3D	; 61
 564:	6a e2       	ldi	r22, 0x2A	; 42
 566:	ce 01       	movw	r24, r28
 568:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    setbitmask(TxControlReg, 0x03); // allow RF signal to transmit on Tx1 and Tx2 pins
 56c:	43 e0       	ldi	r20, 0x03	; 3
 56e:	64 e1       	ldi	r22, 0x14	; 20
 570:	ce 01       	movw	r24, r28
 572:	0e 94 09 02 	call	0x412	; 0x412 <_ZN7mfrc52210setbitmaskEhh>
}
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <_ZN7mfrc52210commandtagEhPhiS0_Pi>:

// this function for writing cmd to mifare card
int mfrc522::commandtag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *res, int* rlen){
 57c:	5f 92       	push	r5
 57e:	6f 92       	push	r6
 580:	7f 92       	push	r7
 582:	8f 92       	push	r8
 584:	9f 92       	push	r9
 586:	af 92       	push	r10
 588:	bf 92       	push	r11
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	ec 01       	movw	r28, r24
 59c:	76 2e       	mov	r7, r22
 59e:	5a 01       	movw	r10, r20
 5a0:	69 01       	movw	r12, r18
    uint8_t irqen = 0x00;
    uint8_t wait_irq = 0x00;
    uint8_t lastbits, n ;
    int i ;

    switch(cmd){
 5a2:	4c e0       	ldi	r20, 0x0C	; 12
 5a4:	64 17       	cp	r22, r20
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x38>
 5a8:	5e e0       	ldi	r21, 0x0E	; 14
 5aa:	65 17       	cp	r22, r21
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x4a>

// this function for writing cmd to mifare card
int mfrc522::commandtag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *res, int* rlen){
    int status = mi_err;
    uint8_t irqen = 0x00;
    uint8_t wait_irq = 0x00;
 5ae:	61 2c       	mov	r6, r1
}

// this function for writing cmd to mifare card
int mfrc522::commandtag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *res, int* rlen){
    int status = mi_err;
    uint8_t irqen = 0x00;
 5b0:	51 2c       	mov	r5, r1
 5b2:	10 c0       	rjmp	.+32     	; 0x5d4 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x58>
            irqen = 0x12; // enable idle cmd and error protocol interrupt to connect irq pin
            wait_irq = 0x10;
            break;
        case mfrc522_transceive:
            irqen = 0x77; // enable idle cmd, error protocol, transmit, receive, lower alert fifo and timer counter value gets zero interrupt to connect irq pin
            wait_irq = 0x30;
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f0 e3       	ldi	r31, 0x30	; 48
 5b8:	6f 2e       	mov	r6, r31
 5ba:	f0 2d       	mov	r31, r0
        case mfrc522_mf_authent:
            irqen = 0x12; // enable idle cmd and error protocol interrupt to connect irq pin
            wait_irq = 0x10;
            break;
        case mfrc522_transceive:
            irqen = 0x77; // enable idle cmd, error protocol, transmit, receive, lower alert fifo and timer counter value gets zero interrupt to connect irq pin
 5bc:	0f 2e       	mov	r0, r31
 5be:	f7 e7       	ldi	r31, 0x77	; 119
 5c0:	5f 2e       	mov	r5, r31
 5c2:	f0 2d       	mov	r31, r0
            wait_irq = 0x30;
            break;
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x58>
    int i ;

    switch(cmd){
        case mfrc522_mf_authent:
            irqen = 0x12; // enable idle cmd and error protocol interrupt to connect irq pin
            wait_irq = 0x10;
 5c6:	68 94       	set
 5c8:	66 24       	eor	r6, r6
 5ca:	64 f8       	bld	r6, 4
    uint8_t lastbits, n ;
    int i ;

    switch(cmd){
        case mfrc522_mf_authent:
            irqen = 0x12; // enable idle cmd and error protocol interrupt to connect irq pin
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f2 e1       	ldi	r31, 0x12	; 18
 5d0:	5f 2e       	mov	r5, r31
 5d2:	f0 2d       	mov	r31, r0
            break;
        default:
            break;
    }

    write_to_reg(CommIEnReg, irqen | 0x80); // interrupt request
 5d4:	45 2d       	mov	r20, r5
 5d6:	40 68       	ori	r20, 0x80	; 128
 5d8:	62 e0       	ldi	r22, 0x02	; 2
 5da:	ce 01       	movw	r24, r28
 5dc:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    clearbitmask(CommIrqReg, 0x80); // clear all interrupt request bits (if it's already set from the beginning)
 5e0:	40 e8       	ldi	r20, 0x80	; 128
 5e2:	64 e0       	ldi	r22, 0x04	; 4
 5e4:	ce 01       	movw	r24, r28
 5e6:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7mfrc52212clearbitmaskEhh>
    setbitmask(FIFOLevelReg, 0x80); // clear read and write pointer if FIFO
 5ea:	40 e8       	ldi	r20, 0x80	; 128
 5ec:	6a e0       	ldi	r22, 0x0A	; 10
 5ee:	ce 01       	movw	r24, r28
 5f0:	0e 94 09 02 	call	0x412	; 0x412 <_ZN7mfrc52210setbitmaskEhh>

    write_to_reg(CommandReg, mfrc522_idle); // no action, cancel the current command
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	ce 01       	movw	r24, r28
 5fa:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>

    // write to fifo 
    for (i = 0; i < dlen; i++){
 5fe:	81 2c       	mov	r8, r1
 600:	91 2c       	mov	r9, r1
 602:	8c 14       	cp	r8, r12
 604:	9d 04       	cpc	r9, r13
 606:	64 f4       	brge	.+24     	; 0x620 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xa4>
        write_to_reg(FIFODataReg, data[i]);
 608:	f5 01       	movw	r30, r10
 60a:	e8 0d       	add	r30, r8
 60c:	f9 1d       	adc	r31, r9
 60e:	40 81       	ld	r20, Z
 610:	69 e0       	ldi	r22, 0x09	; 9
 612:	ce 01       	movw	r24, r28
 614:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    setbitmask(FIFOLevelReg, 0x80); // clear read and write pointer if FIFO

    write_to_reg(CommandReg, mfrc522_idle); // no action, cancel the current command

    // write to fifo 
    for (i = 0; i < dlen; i++){
 618:	8f ef       	ldi	r24, 0xFF	; 255
 61a:	88 1a       	sub	r8, r24
 61c:	98 0a       	sbc	r9, r24
 61e:	f1 cf       	rjmp	.-30     	; 0x602 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x86>
        write_to_reg(FIFODataReg, data[i]);
    }


    // execute the command
    write_to_reg(CommandReg, cmd);
 620:	47 2d       	mov	r20, r7
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	ce 01       	movw	r24, r28
 626:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>

    if (cmd == mfrc522_transceive){
 62a:	9c e0       	ldi	r25, 0x0C	; 12
 62c:	79 12       	cpse	r7, r25
 62e:	05 c0       	rjmp	.+10     	; 0x63a <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xbe>
        setbitmask(BitFramingReg, 0x80); // start the transmission and read continuously between tag and reader (data is get from FIFO)
 630:	40 e8       	ldi	r20, 0x80	; 128
 632:	6d e0       	ldi	r22, 0x0D	; 13
 634:	ce 01       	movw	r24, r28
 636:	0e 94 09 02 	call	0x412	; 0x412 <_ZN7mfrc52210setbitmaskEhh>
    setbitmask(FIFOLevelReg, 0x80); // clear read and write pointer if FIFO

    write_to_reg(CommandReg, mfrc522_idle); // no action, cancel the current command

    // write to fifo 
    for (i = 0; i < dlen; i++){
 63a:	0f 2e       	mov	r0, r31
 63c:	f9 e1       	ldi	r31, 0x19	; 25
 63e:	af 2e       	mov	r10, r31
 640:	b1 2c       	mov	r11, r1
 642:	f0 2d       	mov	r31, r0
 644:	e1 ee       	ldi	r30, 0xE1	; 225
 646:	f4 e0       	ldi	r31, 0x04	; 4
 648:	31 97       	sbiw	r30, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xcc>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xd2>
 64e:	00 00       	nop
    i = 25; // max wait time is 125ms
    do {
        _delay_ms(5);
        // CommIRqReg[7..0]
        // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = read_from_reg(CommIrqReg);
 650:	64 e0       	ldi	r22, 0x04	; 4
 652:	ce 01       	movw	r24, r28
 654:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 658:	d8 2e       	mov	r13, r24
        i--;
 65a:	f1 e0       	ldi	r31, 0x01	; 1
 65c:	af 1a       	sub	r10, r31
 65e:	b1 08       	sbc	r11, r1
    } while ((i != 0) && !(n & 0x01) && !(n & wait_irq)); // wait for timer, idle interrupt, (and receive flag interrupt for transceive)
 660:	29 f0       	breq	.+10     	; 0x66c <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xf0>
 662:	80 fd       	sbrc	r24, 0
 664:	03 c0       	rjmp	.+6      	; 0x66c <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xf0>
 666:	86 2d       	mov	r24, r6
 668:	8d 21       	and	r24, r13
 66a:	61 f3       	breq	.-40     	; 0x644 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0xc8>

    clearbitmask(BitFramingReg, 0x80); // stop transceive
 66c:	40 e8       	ldi	r20, 0x80	; 128
 66e:	6d e0       	ldi	r22, 0x0D	; 13
 670:	ce 01       	movw	r24, r28
 672:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7mfrc52212clearbitmaskEhh>

    if (i != 0) { // request did not timeout
 676:	ab 28       	or	r10, r11
 678:	09 f4       	brne	.+2      	; 0x67c <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x100>
 67a:	5a c0       	rjmp	.+180    	; 0x730 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x1b4>
        if (!(read_from_reg(ErrorReg) & 0x1D)) {    // BufferOvfl Collerr CRCErr ProtocolErr
 67c:	66 e0       	ldi	r22, 0x06	; 6
 67e:	ce 01       	movw	r24, r28
 680:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 684:	8d 71       	andi	r24, 0x1D	; 29
 686:	09 f0       	breq	.+2      	; 0x68a <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x10e>
 688:	57 c0       	rjmp	.+174    	; 0x738 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x1bc>
            status = mi_ok;
            if (n & irqen & 0x01) {
 68a:	5d 20       	and	r5, r13
 68c:	50 fc       	sbrc	r5, 0
 68e:	03 c0       	rjmp	.+6      	; 0x696 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x11a>

    clearbitmask(BitFramingReg, 0x80); // stop transceive

    if (i != 0) { // request did not timeout
        if (!(read_from_reg(ErrorReg) & 0x1D)) {    // BufferOvfl Collerr CRCErr ProtocolErr
            status = mi_ok;
 690:	a1 2c       	mov	r10, r1
 692:	b1 2c       	mov	r11, r1
 694:	04 c0       	rjmp	.+8      	; 0x69e <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x122>
            if (n & irqen & 0x01) {
                status = mi_notag_err;
 696:	68 94       	set
 698:	aa 24       	eor	r10, r10
 69a:	a1 f8       	bld	r10, 1
 69c:	b1 2c       	mov	r11, r1
            }
            if (cmd == mfrc522_transceive){
 69e:	4c e0       	ldi	r20, 0x0C	; 12
 6a0:	74 12       	cpse	r7, r20
 6a2:	28 c0       	rjmp	.+80     	; 0x6f4 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x178>
                n = read_from_reg(FIFOLevelReg);
 6a4:	6a e0       	ldi	r22, 0x0A	; 10
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 6ac:	d8 2e       	mov	r13, r24
                lastbits = read_from_reg(ControlReg) & 0x07;
 6ae:	6c e0       	ldi	r22, 0x0C	; 12
 6b0:	ce 01       	movw	r24, r28
 6b2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 6b6:	87 70       	andi	r24, 0x07	; 7
                if (lastbits){
 6b8:	91 f0       	breq	.+36     	; 0x6de <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x162>
                    *rlen = (n - 1) * 8 + lastbits; // indicate that the number of bits of the last byte can be different 
 6ba:	2d 2d       	mov	r18, r13
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	31 09       	sbc	r19, r1
 6c2:	22 0f       	add	r18, r18
 6c4:	33 1f       	adc	r19, r19
 6c6:	22 0f       	add	r18, r18
 6c8:	33 1f       	adc	r19, r19
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19
 6ce:	f9 01       	movw	r30, r18
 6d0:	e8 0f       	add	r30, r24
 6d2:	f1 1d       	adc	r31, r1
 6d4:	cf 01       	movw	r24, r30
 6d6:	f7 01       	movw	r30, r14
 6d8:	91 83       	std	Z+1, r25	; 0x01
 6da:	80 83       	st	Z, r24
 6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x178>
                } else {
                    *rlen = n * 8;
 6de:	8d 2d       	mov	r24, r13
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	f7 01       	movw	r30, r14
 6f0:	91 83       	std	Z+1, r25	; 0x01
 6f2:	80 83       	st	Z, r24
                }
            }

            if (n == 0) {
 6f4:	d1 10       	cpse	r13, r1
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x180>
                n = 1;
 6f8:	dd 24       	eor	r13, r13
 6fa:	d3 94       	inc	r13
            }
            if (n > MAX_LEN) {
 6fc:	f0 e1       	ldi	r31, 0x10	; 16
 6fe:	fd 15       	cp	r31, r13
 700:	18 f4       	brcc	.+6      	; 0x708 <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x18c>
                n = MAX_LEN; // 106KB per second : 128 bits (16 bytes) therefore can communicate less than 16 bytes
 702:	68 94       	set
 704:	dd 24       	eor	r13, r13
 706:	d4 f8       	bld	r13, 4
            }

            // reading the receive data from FIFO
            for (i = 0; i < n; i++){
 708:	e1 2c       	mov	r14, r1
 70a:	f1 2c       	mov	r15, r1
 70c:	8d 2d       	mov	r24, r13
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	e8 16       	cp	r14, r24
 712:	f9 06       	cpc	r15, r25
 714:	a4 f4       	brge	.+40     	; 0x73e <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x1c2>
                res[i] = read_from_reg(FIFODataReg);
 716:	48 01       	movw	r8, r16
 718:	8e 0c       	add	r8, r14
 71a:	9f 1c       	adc	r9, r15
 71c:	69 e0       	ldi	r22, 0x09	; 9
 71e:	ce 01       	movw	r24, r28
 720:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7mfrc52213read_from_regEh>
 724:	f4 01       	movw	r30, r8
 726:	80 83       	st	Z, r24
            if (n > MAX_LEN) {
                n = MAX_LEN; // 106KB per second : 128 bits (16 bytes) therefore can communicate less than 16 bytes
            }

            // reading the receive data from FIFO
            for (i = 0; i < n; i++){
 728:	ff ef       	ldi	r31, 0xFF	; 255
 72a:	ef 1a       	sub	r14, r31
 72c:	ff 0a       	sbc	r15, r31
 72e:	ee cf       	rjmp	.-36     	; 0x70c <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x190>
    setbitmask(TxControlReg, 0x03); // allow RF signal to transmit on Tx1 and Tx2 pins
}

// this function for writing cmd to mifare card
int mfrc522::commandtag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *res, int* rlen){
    int status = mi_err;
 730:	aa 24       	eor	r10, r10
 732:	a3 94       	inc	r10
 734:	b1 2c       	mov	r11, r1
 736:	03 c0       	rjmp	.+6      	; 0x73e <_ZN7mfrc52210commandtagEhPhiS0_Pi+0x1c2>
            // reading the receive data from FIFO
            for (i = 0; i < n; i++){
                res[i] = read_from_reg(FIFODataReg);
            }
        } 
		else status = mi_err;
 738:	aa 24       	eor	r10, r10
 73a:	a3 94       	inc	r10
 73c:	b1 2c       	mov	r11, r1
    } 
    return status;
}
 73e:	c5 01       	movw	r24, r10
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	ff 90       	pop	r15
 74a:	ef 90       	pop	r14
 74c:	df 90       	pop	r13
 74e:	cf 90       	pop	r12
 750:	bf 90       	pop	r11
 752:	af 90       	pop	r10
 754:	9f 90       	pop	r9
 756:	8f 90       	pop	r8
 758:	7f 90       	pop	r7
 75a:	6f 90       	pop	r6
 75c:	5f 90       	pop	r5
 75e:	08 95       	ret

00000760 <_ZN7mfrc5229requestagEPh>:

// just only for requesting mf1 tag
int mfrc522::requestag(uint8_t* data){
 760:	af 92       	push	r10
 762:	bf 92       	push	r11
 764:	cf 92       	push	r12
 766:	df 92       	push	r13
 768:	ef 92       	push	r14
 76a:	ff 92       	push	r15
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	00 d0       	rcall	.+0      	; 0x776 <_ZN7mfrc5229requestagEPh+0x16>
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	5c 01       	movw	r10, r24
 77c:	6b 01       	movw	r12, r22
    int status; 
    int len;
    write_to_reg(BitFramingReg, 0x07); // 7 bits for request cmd
 77e:	47 e0       	ldi	r20, 0x07	; 7
 780:	6d e0       	ldi	r22, 0x0D	; 13
 782:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    data[0] = mf1_reqa;
 786:	86 e2       	ldi	r24, 0x26	; 38
 788:	f6 01       	movw	r30, r12
 78a:	80 83       	st	Z, r24
    status = commandtag(mfrc522_transceive, data, 1, data, &len);
 78c:	ce 01       	movw	r24, r28
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	7c 01       	movw	r14, r24
 792:	86 01       	movw	r16, r12
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	a6 01       	movw	r20, r12
 79a:	6c e0       	ldi	r22, 0x0C	; 12
 79c:	c5 01       	movw	r24, r10
 79e:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7mfrc52210commandtagEhPhiS0_Pi>
    if ((status != mi_ok) || (len != 0x10)) { // 16-bit ATQA response from tag
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	31 f4       	brne	.+12     	; 0x7b2 <_ZN7mfrc5229requestagEPh+0x52>
 7a6:	29 81       	ldd	r18, Y+1	; 0x01
 7a8:	3a 81       	ldd	r19, Y+2	; 0x02
 7aa:	20 31       	cpi	r18, 0x10	; 16
 7ac:	31 05       	cpc	r19, r1
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <_ZN7mfrc5229requestagEPh+0x58>
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <_ZN7mfrc5229requestagEPh+0x5c>
        status = mi_err;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <_ZN7mfrc5229requestagEPh+0x5c>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
    }

    return status;
}
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	bf 90       	pop	r11
 7d2:	af 90       	pop	r10
 7d4:	08 95       	ret

000007d6 <_ZN7mfrc52212anticollsionEPh>:

int mfrc522::anticollsion(uint8_t* serial){
 7d6:	af 92       	push	r10
 7d8:	bf 92       	push	r11
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	00 d0       	rcall	.+0      	; 0x7ec <_ZN7mfrc52212anticollsionEPh+0x16>
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	5c 01       	movw	r10, r24
 7f2:	6b 01       	movw	r12, r22
    int status, len;
    write_to_reg(BitFramingReg, 0x00);
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	6d e0       	ldi	r22, 0x0D	; 13
 7f8:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    serial[0] = mf1_anticol_1;
 7fc:	83 e9       	ldi	r24, 0x93	; 147
 7fe:	f6 01       	movw	r30, r12
 800:	80 83       	st	Z, r24
    serial[1] = 0x20;
 802:	80 e2       	ldi	r24, 0x20	; 32
 804:	81 83       	std	Z+1, r24	; 0x01
    status = commandtag(mfrc522_transceive, serial, 2, serial, &len);
 806:	ce 01       	movw	r24, r28
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	7c 01       	movw	r14, r24
 80c:	86 01       	movw	r16, r12
 80e:	22 e0       	ldi	r18, 0x02	; 2
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	a6 01       	movw	r20, r12
 814:	6c e0       	ldi	r22, 0x0C	; 12
 816:	c5 01       	movw	r24, r10
 818:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7mfrc52210commandtagEhPhiS0_Pi>
    len = len / 8; //(unit: bytes )
    if ((len == 4)&&(status == mi_ok)) {
        status = mi_ok;
    }
    return status; 
}
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	df 91       	pop	r29
 822:	cf 91       	pop	r28
 824:	1f 91       	pop	r17
 826:	0f 91       	pop	r16
 828:	ff 90       	pop	r15
 82a:	ef 90       	pop	r14
 82c:	df 90       	pop	r13
 82e:	cf 90       	pop	r12
 830:	bf 90       	pop	r11
 832:	af 90       	pop	r10
 834:	08 95       	ret

00000836 <_ZN7mfrc5229selecttagEPh>:


uint8_t mfrc522::selecttag(uint8_t* serial){
 836:	cf 92       	push	r12
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	2a 97       	sbiw	r28, 0x0a	; 10
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	f8 94       	cli
 850:	de bf       	out	0x3e, r29	; 62
 852:	0f be       	out	0x3f, r0	; 63
 854:	cd bf       	out	0x3d, r28	; 61
 856:	6c 01       	movw	r12, r24
 858:	8b 01       	movw	r16, r22
    int i, status, len;
    uint8_t ack = 0x08 ;
    uint8_t buffer[8];
    
    write_to_reg(BitFramingReg, 0x00);
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	6d e0       	ldi	r22, 0x0D	; 13
 85e:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    
    buffer[0] = mf1_select_1;
 862:	83 e9       	ldi	r24, 0x93	; 147
 864:	8b 83       	std	Y+3, r24	; 0x03
    buffer[1] = 0x70;
 866:	80 e7       	ldi	r24, 0x70	; 112
 868:	8c 83       	std	Y+4, r24	; 0x04
    for (i = 0; i < 4; i++){
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	84 30       	cpi	r24, 0x04	; 4
 870:	91 05       	cpc	r25, r1
 872:	7c f4       	brge	.+30     	; 0x892 <_ZN7mfrc5229selecttagEPh+0x5c>
        buffer[i + 2] = serial[i];
 874:	fc 01       	movw	r30, r24
 876:	32 96       	adiw	r30, 0x02	; 2
 878:	d8 01       	movw	r26, r16
 87a:	a8 0f       	add	r26, r24
 87c:	b9 1f       	adc	r27, r25
 87e:	2c 91       	ld	r18, X
 880:	43 e0       	ldi	r20, 0x03	; 3
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	4c 0f       	add	r20, r28
 886:	5d 1f       	adc	r21, r29
 888:	e4 0f       	add	r30, r20
 88a:	f5 1f       	adc	r31, r21
 88c:	20 83       	st	Z, r18
    
    write_to_reg(BitFramingReg, 0x00);
    
    buffer[0] = mf1_select_1;
    buffer[1] = 0x70;
    for (i = 0; i < 4; i++){
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	ee cf       	rjmp	.-36     	; 0x86e <_ZN7mfrc5229selecttagEPh+0x38>
        buffer[i + 2] = serial[i];
    }
    calculateCRC(buffer, 6, &buffer[6]);
 892:	9e 01       	movw	r18, r28
 894:	27 5f       	subi	r18, 0xF7	; 247
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	46 e0       	ldi	r20, 0x06	; 6
 89a:	50 e0       	ldi	r21, 0x00	; 0
 89c:	be 01       	movw	r22, r28
 89e:	6d 5f       	subi	r22, 0xFD	; 253
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	c6 01       	movw	r24, r12
 8a4:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN7mfrc52212calculateCRCEPhiS0_>
    
    status = commandtag(mfrc522_transceive, buffer, 8, buffer, &len);
 8a8:	ce 01       	movw	r24, r28
 8aa:	01 96       	adiw	r24, 0x01	; 1
 8ac:	7c 01       	movw	r14, r24
 8ae:	8e 01       	movw	r16, r28
 8b0:	0d 5f       	subi	r16, 0xFD	; 253
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	28 e0       	ldi	r18, 0x08	; 8
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	a8 01       	movw	r20, r16
 8ba:	6c e0       	ldi	r22, 0x0C	; 12
 8bc:	c6 01       	movw	r24, r12
 8be:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7mfrc52210commandtagEhPhiS0_Pi>
    if ((status == mi_ok) && (buffer[0] == ack)) {
        status = mi_ok;
    }
    return status;
}
 8c2:	2a 96       	adiw	r28, 0x0a	; 10
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	f8 94       	cli
 8c8:	de bf       	out	0x3e, r29	; 62
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	cd bf       	out	0x3d, r28	; 61
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	1f 91       	pop	r17
 8d4:	0f 91       	pop	r16
 8d6:	ff 90       	pop	r15
 8d8:	ef 90       	pop	r14
 8da:	df 90       	pop	r13
 8dc:	cf 90       	pop	r12
 8de:	08 95       	ret

000008e0 <_ZN7mfrc5227halttagEv>:



int mfrc522::halttag(){
 8e0:	cf 92       	push	r12
 8e2:	df 92       	push	r13
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	00 d0       	rcall	.+0      	; 0x8f2 <_ZN7mfrc5227halttagEv+0x12>
 8f2:	00 d0       	rcall	.+0      	; 0x8f4 <_ZN7mfrc5227halttagEv+0x14>
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <_ZN7mfrc5227halttagEv+0x16>
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	6c 01       	movw	r12, r24
    int status, len;
    uint8_t buffer[4];
    
    write_to_reg(BitFramingReg, 0x00);
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	6d e0       	ldi	r22, 0x0D	; 13
 900:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN7mfrc52212write_to_regEhh>
    
    buffer[0] = mf1_halt;
 904:	80 e5       	ldi	r24, 0x50	; 80
 906:	8b 83       	std	Y+3, r24	; 0x03
    buffer[1] = 0;
 908:	1c 82       	std	Y+4, r1	; 0x04
    calculateCRC(buffer, 2, &buffer[2]);
 90a:	9e 01       	movw	r18, r28
 90c:	2b 5f       	subi	r18, 0xFB	; 251
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	42 e0       	ldi	r20, 0x02	; 2
 912:	50 e0       	ldi	r21, 0x00	; 0
 914:	be 01       	movw	r22, r28
 916:	6d 5f       	subi	r22, 0xFD	; 253
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	c6 01       	movw	r24, r12
 91c:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN7mfrc52212calculateCRCEPhiS0_>
    status = commandtag(mfrc522_transceive, buffer, 4, buffer, &len);
 920:	ce 01       	movw	r24, r28
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	7c 01       	movw	r14, r24
 926:	8e 01       	movw	r16, r28
 928:	0d 5f       	subi	r16, 0xFD	; 253
 92a:	1f 4f       	sbci	r17, 0xFF	; 255
 92c:	24 e0       	ldi	r18, 0x04	; 4
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	a8 01       	movw	r20, r16
 932:	6c e0       	ldi	r22, 0x0C	; 12
 934:	c6 01       	movw	r24, r12
 936:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7mfrc52210commandtagEhPhiS0_Pi>
 93a:	8c 01       	movw	r16, r24
    clearbitmask(Status2Reg, 0x08); // turn off encryption
 93c:	48 e0       	ldi	r20, 0x08	; 8
 93e:	68 e0       	ldi	r22, 0x08	; 8
 940:	c6 01       	movw	r24, r12
 942:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7mfrc52212clearbitmaskEhh>
    return status;
}
 946:	c8 01       	movw	r24, r16
 948:	26 96       	adiw	r28, 0x06	; 6
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	df 90       	pop	r13
 962:	cf 90       	pop	r12
 964:	08 95       	ret

00000966 <_Z41__static_initialization_and_destruction_0ii>:
				}

			}
			}
	return 0;
}
 966:	01 97       	sbiw	r24, 0x01	; 1
 968:	59 f4       	brne	.+22     	; 0x980 <_Z41__static_initialization_and_destruction_0ii+0x1a>
 96a:	6f 3f       	cpi	r22, 0xFF	; 255
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	41 f4       	brne	.+16     	; 0x980 <_Z41__static_initialization_and_destruction_0ii+0x1a>
#include "spi_module.h"
#include "uart_module.h"
#include "i2c_moudle.h"
#include "i2c_lcd.h"

	mfrc522 x(ss,0);
 970:	40 e0       	ldi	r20, 0x00	; 0
 972:	50 e0       	ldi	r21, 0x00	; 0
 974:	62 e0       	ldi	r22, 0x02	; 2
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	8a e4       	ldi	r24, 0x4A	; 74
 97a:	91 e0       	ldi	r25, 0x01	; 1
 97c:	0e 94 80 01 	call	0x300	; 0x300 <_ZN7mfrc522C1Eii>
 980:	08 95       	ret

00000982 <_Z9main_initv>:
	
void main_init(){
	DDRC = (1<<0)|(1<<1)|(1<<2);
 982:	87 e0       	ldi	r24, 0x07	; 7
 984:	87 b9       	out	0x07, r24	; 7
	i2c_init();
 986:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z8i2c_initv>
	i2c_lcd_init();
 98a:	0e 94 a1 00 	call	0x142	; 0x142 <_Z12i2c_lcd_initv>
	spi_init();
 98e:	0e 94 51 06 	call	0xca2	; 0xca2 <_Z8spi_initv>
	uart_init();
 992:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_Z9uart_initv>
	x.RFID_init();
 996:	8a e4       	ldi	r24, 0x4A	; 74
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN7mfrc5229RFID_initEv>
 99e:	08 95       	ret

000009a0 <_Z9print_lcdh>:
}


void print_lcd(uint8_t x){
 9a0:	0f 93       	push	r16
 9a2:	1f 93       	push	r17
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	00 d0       	rcall	.+0      	; 0x9aa <_Z9print_lcdh+0xa>
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <_Z9print_lcdh+0xc>
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
	int temp;
	int hex[2];
	for (int i = 0; i<2; i++){
 9b0:	20 e0       	ldi	r18, 0x00	; 0
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	22 30       	cpi	r18, 0x02	; 2
 9b6:	31 05       	cpc	r19, r1
 9b8:	0c f0       	brlt	.+2      	; 0x9bc <_Z9print_lcdh+0x1c>
 9ba:	79 c0       	rjmp	.+242    	; 0xaae <_Z9print_lcdh+0x10e>
 9bc:	98 2f       	mov	r25, r24
 9be:	9f 70       	andi	r25, 0x0F	; 15
		temp = x % 16;
 9c0:	49 2f       	mov	r20, r25
 9c2:	50 e0       	ldi	r21, 0x00	; 0
		x/=16;
 9c4:	82 95       	swap	r24
 9c6:	8f 70       	andi	r24, 0x0F	; 15
		switch (temp){
 9c8:	9c 30       	cpi	r25, 0x0C	; 12
 9ca:	49 f1       	breq	.+82     	; 0xa1e <_Z9print_lcdh+0x7e>
 9cc:	28 f4       	brcc	.+10     	; 0x9d8 <_Z9print_lcdh+0x38>
 9ce:	9a 30       	cpi	r25, 0x0A	; 10
 9d0:	51 f0       	breq	.+20     	; 0x9e6 <_Z9print_lcdh+0x46>
 9d2:	9b 30       	cpi	r25, 0x0B	; 11
 9d4:	b1 f0       	breq	.+44     	; 0xa02 <_Z9print_lcdh+0x62>
 9d6:	5b c0       	rjmp	.+182    	; 0xa8e <_Z9print_lcdh+0xee>
 9d8:	9e 30       	cpi	r25, 0x0E	; 14
 9da:	e9 f1       	breq	.+122    	; 0xa56 <_Z9print_lcdh+0xb6>
 9dc:	70 f1       	brcs	.+92     	; 0xa3a <_Z9print_lcdh+0x9a>
 9de:	9f 30       	cpi	r25, 0x0F	; 15
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <_Z9print_lcdh+0x44>
 9e2:	47 c0       	rjmp	.+142    	; 0xa72 <_Z9print_lcdh+0xd2>
 9e4:	54 c0       	rjmp	.+168    	; 0xa8e <_Z9print_lcdh+0xee>
			case 10:
			hex [i] = 'A';
 9e6:	f9 01       	movw	r30, r18
 9e8:	ee 0f       	add	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	41 e0       	ldi	r20, 0x01	; 1
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	4c 0f       	add	r20, r28
 9f2:	5d 1f       	adc	r21, r29
 9f4:	e4 0f       	add	r30, r20
 9f6:	f5 1f       	adc	r31, r21
 9f8:	41 e4       	ldi	r20, 0x41	; 65
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	51 83       	std	Z+1, r21	; 0x01
 9fe:	40 83       	st	Z, r20
			break;
 a00:	53 c0       	rjmp	.+166    	; 0xaa8 <_Z9print_lcdh+0x108>
						case 11:
						hex [i] = 'B';
 a02:	f9 01       	movw	r30, r18
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	61 e0       	ldi	r22, 0x01	; 1
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	6c 0f       	add	r22, r28
 a0e:	7d 1f       	adc	r23, r29
 a10:	e6 0f       	add	r30, r22
 a12:	f7 1f       	adc	r31, r23
 a14:	42 e4       	ldi	r20, 0x42	; 66
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	51 83       	std	Z+1, r21	; 0x01
 a1a:	40 83       	st	Z, r20
						break;
 a1c:	45 c0       	rjmp	.+138    	; 0xaa8 <_Z9print_lcdh+0x108>
									case 12:
									hex [i] = 'C';
 a1e:	f9 01       	movw	r30, r18
 a20:	ee 0f       	add	r30, r30
 a22:	ff 1f       	adc	r31, r31
 a24:	41 e0       	ldi	r20, 0x01	; 1
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	4c 0f       	add	r20, r28
 a2a:	5d 1f       	adc	r21, r29
 a2c:	e4 0f       	add	r30, r20
 a2e:	f5 1f       	adc	r31, r21
 a30:	43 e4       	ldi	r20, 0x43	; 67
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	51 83       	std	Z+1, r21	; 0x01
 a36:	40 83       	st	Z, r20
									break;
 a38:	37 c0       	rjmp	.+110    	; 0xaa8 <_Z9print_lcdh+0x108>
												case 13:
												hex [i] = 'D';
 a3a:	f9 01       	movw	r30, r18
 a3c:	ee 0f       	add	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	61 e0       	ldi	r22, 0x01	; 1
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	6c 0f       	add	r22, r28
 a46:	7d 1f       	adc	r23, r29
 a48:	e6 0f       	add	r30, r22
 a4a:	f7 1f       	adc	r31, r23
 a4c:	44 e4       	ldi	r20, 0x44	; 68
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	51 83       	std	Z+1, r21	; 0x01
 a52:	40 83       	st	Z, r20
												break;
 a54:	29 c0       	rjmp	.+82     	; 0xaa8 <_Z9print_lcdh+0x108>
															case 14:
															hex [i] = 'E';
 a56:	f9 01       	movw	r30, r18
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	41 e0       	ldi	r20, 0x01	; 1
 a5e:	50 e0       	ldi	r21, 0x00	; 0
 a60:	4c 0f       	add	r20, r28
 a62:	5d 1f       	adc	r21, r29
 a64:	e4 0f       	add	r30, r20
 a66:	f5 1f       	adc	r31, r21
 a68:	45 e4       	ldi	r20, 0x45	; 69
 a6a:	50 e0       	ldi	r21, 0x00	; 0
 a6c:	51 83       	std	Z+1, r21	; 0x01
 a6e:	40 83       	st	Z, r20
															break;
 a70:	1b c0       	rjmp	.+54     	; 0xaa8 <_Z9print_lcdh+0x108>
																		case 15:
																		hex [i] = 'F';
 a72:	f9 01       	movw	r30, r18
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	61 e0       	ldi	r22, 0x01	; 1
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	6c 0f       	add	r22, r28
 a7e:	7d 1f       	adc	r23, r29
 a80:	e6 0f       	add	r30, r22
 a82:	f7 1f       	adc	r31, r23
 a84:	46 e4       	ldi	r20, 0x46	; 70
 a86:	50 e0       	ldi	r21, 0x00	; 0
 a88:	51 83       	std	Z+1, r21	; 0x01
 a8a:	40 83       	st	Z, r20
																		break;
 a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <_Z9print_lcdh+0x108>
			default:
			hex[i] = temp + 0x30;
 a8e:	40 5d       	subi	r20, 0xD0	; 208
 a90:	5f 4f       	sbci	r21, 0xFF	; 255
 a92:	f9 01       	movw	r30, r18
 a94:	ee 0f       	add	r30, r30
 a96:	ff 1f       	adc	r31, r31
 a98:	61 e0       	ldi	r22, 0x01	; 1
 a9a:	70 e0       	ldi	r23, 0x00	; 0
 a9c:	6c 0f       	add	r22, r28
 a9e:	7d 1f       	adc	r23, r29
 aa0:	e6 0f       	add	r30, r22
 aa2:	f7 1f       	adc	r31, r23
 aa4:	51 83       	std	Z+1, r21	; 0x01
 aa6:	40 83       	st	Z, r20


void print_lcd(uint8_t x){
	int temp;
	int hex[2];
	for (int i = 0; i<2; i++){
 aa8:	2f 5f       	subi	r18, 0xFF	; 255
 aaa:	3f 4f       	sbci	r19, 0xFF	; 255
 aac:	83 cf       	rjmp	.-250    	; 0x9b4 <_Z9print_lcdh+0x14>
 aae:	01 e0       	ldi	r16, 0x01	; 1
 ab0:	10 e0       	ldi	r17, 0x00	; 0
																		break;
			default:
			hex[i] = temp + 0x30;
		}
	}
		for (int i = 1 ;i >= 0; i--){
 ab2:	11 23       	and	r17, r17
 ab4:	7c f0       	brlt	.+30     	; 0xad4 <_Z9print_lcdh+0x134>
			i2c_lcd_sendchar((char)(hex[i]));
 ab6:	f8 01       	movw	r30, r16
 ab8:	ee 0f       	add	r30, r30
 aba:	ff 1f       	adc	r31, r31
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	8c 0f       	add	r24, r28
 ac2:	9d 1f       	adc	r25, r29
 ac4:	e8 0f       	add	r30, r24
 ac6:	f9 1f       	adc	r31, r25
 ac8:	80 81       	ld	r24, Z
 aca:	0e 94 03 01 	call	0x206	; 0x206 <_Z16i2c_lcd_sendcharc>
																		break;
			default:
			hex[i] = temp + 0x30;
		}
	}
		for (int i = 1 ;i >= 0; i--){
 ace:	01 50       	subi	r16, 0x01	; 1
 ad0:	11 09       	sbc	r17, r1
 ad2:	ef cf       	rjmp	.-34     	; 0xab2 <_Z9print_lcdh+0x112>
			i2c_lcd_sendchar((char)(hex[i]));
		}
}
 ad4:	0f 90       	pop	r0
 ad6:	0f 90       	pop	r0
 ad8:	0f 90       	pop	r0
 ada:	0f 90       	pop	r0
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	1f 91       	pop	r17
 ae2:	0f 91       	pop	r16
 ae4:	08 95       	ret

00000ae6 <main>:

int main(void)
{	
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
 aea:	cd b7       	in	r28, 0x3d	; 61
 aec:	de b7       	in	r29, 0x3e	; 62
 aee:	64 97       	sbiw	r28, 0x14	; 20
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	de bf       	out	0x3e, r29	; 62
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	cd bf       	out	0x3d, r28	; 61
	main_init();
 afa:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9main_initv>
	int status = mi_err;
	uint8_t serial[MAX_LEN];
	uint8_t buffer[4];
	
	buffer[0] = 0x46;
 afe:	86 e4       	ldi	r24, 0x46	; 70
 b00:	89 8b       	std	Y+17, r24	; 0x11
	buffer[1] = 0xE9;
 b02:	89 ee       	ldi	r24, 0xE9	; 233
 b04:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[2] = 0xEC;
 b06:	8c ee       	ldi	r24, 0xEC	; 236
 b08:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[3] = 0xAD;
 b0a:	8d ea       	ldi	r24, 0xAD	; 173
 b0c:	8c 8b       	std	Y+20, r24	; 0x14
	
	int cnt = 0,same = 0;
		
		i2c_lcd_position(1,1);
 b0e:	61 e0       	ldi	r22, 0x01	; 1
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z16i2c_lcd_positionii>
		i2c_lcd_sendstring("let start");
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	91 e0       	ldi	r25, 0x01	; 1
 b1e:	0e 94 45 01 	call	0x28a	; 0x28a <_Z18i2c_lcd_sendstringPc>
 b22:	2f eb       	ldi	r18, 0xBF	; 191
 b24:	47 e2       	ldi	r20, 0x27	; 39
 b26:	89 e0       	ldi	r24, 0x09	; 9
 b28:	21 50       	subi	r18, 0x01	; 1
 b2a:	40 40       	sbci	r20, 0x00	; 0
 b2c:	80 40       	sbci	r24, 0x00	; 0
 b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0x42>
 b30:	00 c0       	rjmp	.+0      	; 0xb32 <main+0x4c>
 b32:	00 00       	nop
		_delay_ms(3000);
		i2c_lcd_sendcmd(lcd_cleardisplay);	
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15i2c_lcd_sendcmdc>
		uint8_t a = x.getfirmwareversion();
 b3a:	8a e4       	ldi	r24, 0x4A	; 74
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN7mfrc52218getfirmwareversionEv>
		if (a == 0x91) i2c_lcd_sendstring("version 1.0");
 b42:	81 39       	cpi	r24, 0x91	; 145
 b44:	29 f4       	brne	.+10     	; 0xb50 <main+0x6a>
 b46:	8a e0       	ldi	r24, 0x0A	; 10
 b48:	91 e0       	ldi	r25, 0x01	; 1
 b4a:	0e 94 45 01 	call	0x28a	; 0x28a <_Z18i2c_lcd_sendstringPc>
 b4e:	0b c0       	rjmp	.+22     	; 0xb66 <main+0x80>
		else if (a == 0x92) i2c_lcd_sendstring("version 2.0");
 b50:	82 39       	cpi	r24, 0x92	; 146
 b52:	29 f4       	brne	.+10     	; 0xb5e <main+0x78>
 b54:	86 e1       	ldi	r24, 0x16	; 22
 b56:	91 e0       	ldi	r25, 0x01	; 1
 b58:	0e 94 45 01 	call	0x28a	; 0x28a <_Z18i2c_lcd_sendstringPc>
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <main+0x80>
		else i2c_lcd_sendstring("no receive cmd");
 b5e:	82 e2       	ldi	r24, 0x22	; 34
 b60:	91 e0       	ldi	r25, 0x01	; 1
 b62:	0e 94 45 01 	call	0x28a	; 0x28a <_Z18i2c_lcd_sendstringPc>
			PORTC ^= (1<<2);
			_delay_ms(500);
			if(status == mi_ok) {
				status = x.anticollsion (serial);
				if (status == mi_ok) {
					cnt = 0;
 b66:	00 e0       	ldi	r16, 0x00	; 0
 b68:	10 e0       	ldi	r17, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
			same = 0;
			here:
			i2c_lcd_position(1,2);
 b6a:	62 e0       	ldi	r22, 0x02	; 2
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z16i2c_lcd_positionii>
			cnt++;
 b76:	0f 5f       	subi	r16, 0xFF	; 255
 b78:	1f 4f       	sbci	r17, 0xFF	; 255
			if (cnt == 1)  i2c_lcd_sendstring("                "); // clear display just only 1 time
 b7a:	01 30       	cpi	r16, 0x01	; 1
 b7c:	11 05       	cpc	r17, r1
 b7e:	21 f4       	brne	.+8      	; 0xb88 <main+0xa2>
 b80:	81 e3       	ldi	r24, 0x31	; 49
 b82:	91 e0       	ldi	r25, 0x01	; 1
 b84:	0e 94 45 01 	call	0x28a	; 0x28a <_Z18i2c_lcd_sendstringPc>
			status=x.requestag(serial);
 b88:	be 01       	movw	r22, r28
 b8a:	6f 5f       	subi	r22, 0xFF	; 255
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8a e4       	ldi	r24, 0x4A	; 74
 b90:	91 e0       	ldi	r25, 0x01	; 1
 b92:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN7mfrc5229requestagEPh>
 b96:	9c 01       	movw	r18, r24
			PORTC ^= (1<<2);
 b98:	88 b1       	in	r24, 0x08	; 8
 b9a:	94 e0       	ldi	r25, 0x04	; 4
 b9c:	98 27       	eor	r25, r24
 b9e:	98 b9       	out	0x08, r25	; 8
 ba0:	9f e9       	ldi	r25, 0x9F	; 159
 ba2:	46 e8       	ldi	r20, 0x86	; 134
 ba4:	81 e0       	ldi	r24, 0x01	; 1
 ba6:	91 50       	subi	r25, 0x01	; 1
 ba8:	40 40       	sbci	r20, 0x00	; 0
 baa:	80 40       	sbci	r24, 0x00	; 0
 bac:	e1 f7       	brne	.-8      	; 0xba6 <main+0xc0>
 bae:	00 c0       	rjmp	.+0      	; 0xbb0 <main+0xca>
 bb0:	00 00       	nop
			_delay_ms(500);
			if(status == mi_ok) {
 bb2:	23 2b       	or	r18, r19
 bb4:	d1 f6       	brne	.-76     	; 0xb6a <main+0x84>
				status = x.anticollsion (serial);
 bb6:	be 01       	movw	r22, r28
 bb8:	6f 5f       	subi	r22, 0xFF	; 255
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	8a e4       	ldi	r24, 0x4A	; 74
 bbe:	91 e0       	ldi	r25, 0x01	; 1
 bc0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN7mfrc52212anticollsionEPh>
				if (status == mi_ok) {
 bc4:	89 2b       	or	r24, r25
 bc6:	89 f6       	brne	.-94     	; 0xb6a <main+0x84>
					cnt = 0;
					i2c_lcd_position(1,2);
 bc8:	62 e0       	ldi	r22, 0x02	; 2
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	81 e0       	ldi	r24, 0x01	; 1
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z16i2c_lcd_positionii>
					i2c_lcd_sendstring("NUID: ");
 bd4:	82 e4       	ldi	r24, 0x42	; 66
 bd6:	91 e0       	ldi	r25, 0x01	; 1
 bd8:	0e 94 45 01 	call	0x28a	; 0x28a <_Z18i2c_lcd_sendstringPc>
				//	uart_transmit_string("NUID: ");
					for (int i = 0;i < 4; i++){  
 bdc:	00 e0       	ldi	r16, 0x00	; 0
 bde:	10 e0       	ldi	r17, 0x00	; 0
 be0:	04 30       	cpi	r16, 0x04	; 4
 be2:	11 05       	cpc	r17, r1
 be4:	64 f4       	brge	.+24     	; 0xbfe <main+0x118>
						print_lcd(serial[i]);
 be6:	e1 e0       	ldi	r30, 0x01	; 1
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	ec 0f       	add	r30, r28
 bec:	fd 1f       	adc	r31, r29
 bee:	e0 0f       	add	r30, r16
 bf0:	f1 1f       	adc	r31, r17
 bf2:	80 81       	ld	r24, Z
 bf4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z9print_lcdh>
				if (status == mi_ok) {
					cnt = 0;
					i2c_lcd_position(1,2);
					i2c_lcd_sendstring("NUID: ");
				//	uart_transmit_string("NUID: ");
					for (int i = 0;i < 4; i++){  
 bf8:	0f 5f       	subi	r16, 0xFF	; 255
 bfa:	1f 4f       	sbci	r17, 0xFF	; 255
 bfc:	f1 cf       	rjmp	.-30     	; 0xbe0 <main+0xfa>
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	40 e0       	ldi	r20, 0x00	; 0
 c04:	50 e0       	ldi	r21, 0x00	; 0
						print_lcd(serial[i]);
			//			uart_transmit_char(serial[i]);
					}
					
					
					for(int i = 0 ;i<4;i++){
 c06:	84 30       	cpi	r24, 0x04	; 4
 c08:	91 05       	cpc	r25, r1
 c0a:	a4 f4       	brge	.+40     	; 0xc34 <main+0x14e>
						if (serial[i] == buffer[i]) same++;
 c0c:	e1 e0       	ldi	r30, 0x01	; 1
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	ec 0f       	add	r30, r28
 c12:	fd 1f       	adc	r31, r29
 c14:	e8 0f       	add	r30, r24
 c16:	f9 1f       	adc	r31, r25
 c18:	30 81       	ld	r19, Z
 c1a:	e1 e1       	ldi	r30, 0x11	; 17
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	ec 0f       	add	r30, r28
 c20:	fd 1f       	adc	r31, r29
 c22:	e8 0f       	add	r30, r24
 c24:	f9 1f       	adc	r31, r25
 c26:	20 81       	ld	r18, Z
 c28:	32 13       	cpse	r19, r18
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <main+0x14a>
 c2c:	4f 5f       	subi	r20, 0xFF	; 255
 c2e:	5f 4f       	sbci	r21, 0xFF	; 255
						print_lcd(serial[i]);
			//			uart_transmit_char(serial[i]);
					}
					
					
					for(int i = 0 ;i<4;i++){
 c30:	01 96       	adiw	r24, 0x01	; 1
 c32:	e9 cf       	rjmp	.-46     	; 0xc06 <main+0x120>
						if (serial[i] == buffer[i]) same++;
					}
					
							if (same==4) {
 c34:	44 30       	cpi	r20, 0x04	; 4
 c36:	51 05       	cpc	r21, r1
 c38:	81 f4       	brne	.+32     	; 0xc5a <main+0x174>
								PORTC |= (1<<1);
 c3a:	88 b1       	in	r24, 0x08	; 8
 c3c:	82 60       	ori	r24, 0x02	; 2
 c3e:	88 b9       	out	0x08, r24	; 8
 c40:	9f e3       	ldi	r25, 0x3F	; 63
 c42:	22 e4       	ldi	r18, 0x42	; 66
 c44:	4f e0       	ldi	r20, 0x0F	; 15
 c46:	91 50       	subi	r25, 0x01	; 1
 c48:	20 40       	sbci	r18, 0x00	; 0
 c4a:	40 40       	sbci	r20, 0x00	; 0
 c4c:	e1 f7       	brne	.-8      	; 0xc46 <main+0x160>
 c4e:	00 c0       	rjmp	.+0      	; 0xc50 <main+0x16a>
 c50:	00 00       	nop
								_delay_ms(5000);
								PORTC &= ~(1<<1);
 c52:	88 b1       	in	r24, 0x08	; 8
 c54:	8d 7f       	andi	r24, 0xFD	; 253
 c56:	88 b9       	out	0x08, r24	; 8
 c58:	0f c0       	rjmp	.+30     	; 0xc78 <main+0x192>
							}
							else{
								PORTC |= (1<<0);
 c5a:	88 b1       	in	r24, 0x08	; 8
 c5c:	81 60       	ori	r24, 0x01	; 1
 c5e:	88 b9       	out	0x08, r24	; 8
 c60:	8f e3       	ldi	r24, 0x3F	; 63
 c62:	92 e4       	ldi	r25, 0x42	; 66
 c64:	2f e0       	ldi	r18, 0x0F	; 15
 c66:	81 50       	subi	r24, 0x01	; 1
 c68:	90 40       	sbci	r25, 0x00	; 0
 c6a:	20 40       	sbci	r18, 0x00	; 0
 c6c:	e1 f7       	brne	.-8      	; 0xc66 <main+0x180>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <main+0x18a>
 c70:	00 00       	nop
								_delay_ms(5000);
								PORTC &= ~(1<<0);
 c72:	88 b1       	in	r24, 0x08	; 8
 c74:	8e 7f       	andi	r24, 0xFE	; 254
 c76:	88 b9       	out	0x08, r24	; 8
							}				
									
					

					status = x.selecttag(serial);
 c78:	be 01       	movw	r22, r28
 c7a:	6f 5f       	subi	r22, 0xFF	; 255
 c7c:	7f 4f       	sbci	r23, 0xFF	; 255
 c7e:	8a e4       	ldi	r24, 0x4A	; 74
 c80:	91 e0       	ldi	r25, 0x01	; 1
 c82:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN7mfrc5229selecttagEPh>
					status = x.halttag();
 c86:	8a e4       	ldi	r24, 0x4A	; 74
 c88:	91 e0       	ldi	r25, 0x01	; 1
 c8a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN7mfrc5227halttagEv>
			PORTC ^= (1<<2);
			_delay_ms(500);
			if(status == mi_ok) {
				status = x.anticollsion (serial);
				if (status == mi_ok) {
					cnt = 0;
 c8e:	00 e0       	ldi	r16, 0x00	; 0
 c90:	10 e0       	ldi	r17, 0x00	; 0
 c92:	6b cf       	rjmp	.-298    	; 0xb6a <main+0x84>

00000c94 <_GLOBAL__sub_I_x>:
				}

			}
			}
	return 0;
}
 c94:	6f ef       	ldi	r22, 0xFF	; 255
 c96:	7f ef       	ldi	r23, 0xFF	; 255
 c98:	81 e0       	ldi	r24, 0x01	; 1
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 b3 04 	call	0x966	; 0x966 <_Z41__static_initialization_and_destruction_0ii>
 ca0:	08 95       	ret

00000ca2 <_Z8spi_initv>:

#include "spi_module.h"


void spi_init(){
	DDRB = (1<<mosi)|(1<<sck)|(1<<ss);
 ca2:	8c e2       	ldi	r24, 0x2C	; 44
 ca4:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 ca6:	81 e5       	ldi	r24, 0x51	; 81
 ca8:	8c bd       	out	0x2c, r24	; 44
	sbi(PORTB,ss);
 caa:	85 b1       	in	r24, 0x05	; 5
 cac:	84 60       	ori	r24, 0x04	; 4
 cae:	85 b9       	out	0x05, r24	; 5
 cb0:	08 95       	ret

00000cb2 <_Z12spi_transmith>:
}

uint8_t spi_transmit(uint8_t data){
	uint8_t temp;
	SPDR = data;
 cb2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 cb4:	0d b4       	in	r0, 0x2d	; 45
 cb6:	07 fe       	sbrs	r0, 7
 cb8:	fd cf       	rjmp	.-6      	; 0xcb4 <_Z12spi_transmith+0x2>
	temp = SPDR;  // clear flag
 cba:	8e b5       	in	r24, 0x2e	; 46
	return temp;
 cbc:	08 95       	ret

00000cbe <_Z9uart_initv>:
 */ 

#include "uart_module.h"

void uart_init(){
	UCSR0A |= (1<<U2X0);
 cbe:	e0 ec       	ldi	r30, 0xC0	; 192
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	80 81       	ld	r24, Z
 cc4:	82 60       	ori	r24, 0x02	; 2
 cc6:	80 83       	st	Z, r24
	UCSR0B = 1<<TXEN0;
 cc8:	88 e0       	ldi	r24, 0x08	; 8
 cca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
 cce:	86 e0       	ldi	r24, 0x06	; 6
 cd0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = 103;
 cd4:	87 e6       	ldi	r24, 0x67	; 103
 cd6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 cda:	08 95       	ret

00000cdc <__tablejump2__>:
 cdc:	ee 0f       	add	r30, r30
 cde:	ff 1f       	adc	r31, r31
 ce0:	05 90       	lpm	r0, Z+
 ce2:	f4 91       	lpm	r31, Z
 ce4:	e0 2d       	mov	r30, r0
 ce6:	09 94       	ijmp

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
